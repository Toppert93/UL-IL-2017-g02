/* @author Steve
* @date Tue Mar 14 23:24:57 CET 2017
*/

package icrash.usecases.usecase {
	
		
import icrash.environment
import icrash.usecases.subfunctions
import icrash.usecases.ugSecurelyUseSystem

Use Case Model {

use case system usergoal 
  ugResetPassword() {
	
	actor actAuthenticated[primary,active]
	actor actAdministrator[secondary]

	reuse oeLogin[0..*]
	reuse oeFillCaptcha[0..*]
	reuse oeResetPassword[1..1]

	step a: actAuthenticated 
	     executes oeLogin
	step b: actAuthenticated 
	     executes oeLogin
	step c: actAuthenticated 
	     executes oeLogin
	step d: actAuthenticated 
	     executes oeFillCaptcha          
	step e: actAuthenticated 
	     executes oeResetPassword
	
	ordering constraint 
	 "Steps (a) (b) (c) (d) are not necessary.
	  Step (e) must always be the last.
	  Step (a) (b) (c) must precede Step (d)."
		}
//----------------------------------------------------
	use case system usergoal 
	ugAdministratePointOfInterest() {
		actor actAdministrator[primary,active]
		
		reuse ugSecurelyUseSystem[1..*]
		reuse oeAddPointOfInterest[1..*]
		reuse oeEditPointOfInterest[0..*]
		reuse oeDeletePointOfInterest[0..*]
		
		step a: actAdministrator 
			executes ugSecurelyUseSystem
		step b: actAdministrator
			executes oeAddPointOfInterest
		step c : actAdministrator
			executes oeEditPointOfInterest
		step d : actAdministrator
			executes oeDeletePointOfInterest
		
		ordering constraint
			"steps (a) (b) (c) and (d) executions are interleaved 
			(steps (b) (c) and (d) have their protocol constrained bye steps of (a)."
		ordering constraint
		"steps (a) (b) (c) and (d) can be executed multiple times"
		}
	}
}